import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

st.title("Previs√£o do IPCA com Regress√£o Linear")

# Descri√ß√£o introdut√≥ria
st.markdown("""
### üìà Sobre esta aplica√ß√£o

Este painel interativo permite a visualiza√ß√£o dos resultados de um modelo de regress√£o linear aplicado sobre o IPCA.

Voc√™ poder√°:
- Comparar valores **reais** e **previstos** do IPCA;
- Consultar **m√©tricas de desempenho** do modelo;
- **Baixar** o resultado completo com os c√°lculos de erro.
""")

# Upload do arquivo CSV com resultados prontos
uploaded_file = st.file_uploader("Escolha o arquivo CSV com os dados de previs√£o", type="csv")

if uploaded_file is not None:
    try:
        # Leitura do CSV
        df = pd.read_csv(uploaded_file, sep=";")
        df.columns = df.columns.str.strip()

        # C√°lculo das colunas auxiliares
        df["Erro Absoluto"] = abs(df["√çndice geral Real"] - df["√çndice geral Previsto"])
        df["Erro"] = df["√çndice geral Real"] - df["√çndice geral Previsto"]
        df["Acerto"] = df["Erro Absoluto"] <= 0.1

        # Exibe os dados
        st.subheader("Resultados da Previs√£o")
        st.dataframe(df.drop(columns=["Per√≠odo"], errors="ignore"))

        # Gr√°fico: Real vs Previsto (scatter)
        st.subheader("Gr√°fico: Comparativo Real vs Previsto")
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.scatter(df["√çndice geral Real"], df["√çndice geral Previsto"], color='purple', label="Pontos de previs√£o")
        ax.plot([df["√çndice geral Real"].min(), df["√çndice geral Real"].max()],
                [df["√çndice geral Real"].min(), df["√çndice geral Real"].max()],
                color='gray', linestyle='--', label="Ideal (y = x)")
        ax.set_xlabel("√çndice Geral Real")
        ax.set_ylabel("√çndice Geral Previsto")
        ax.set_title("Dispers√£o entre valores Reais e Previstos")
        ax.legend()
        st.pyplot(fig)

        # M√©tricas
        y_true = df["√çndice geral Real"]
        y_pred = df["√çndice geral Previsto"]
        mse = mean_squared_error(y_true, y_pred)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        st.subheader("M√©tricas do Modelo")
        st.write(f"Erro Quadr√°tico M√©dio (MSE): {mse:.4f}")
        st.write(f"Erro Absoluto M√©dio (MAE): {mae:.4f}")
        st.write(f"Coeficiente de Determina√ß√£o (R¬≤): {r2:.4f}")

        acuracia = df["Acerto"].mean() * 100
        st.write(f"Acur√°cia com erro ‚â§ 0.1: {acuracia:.2f}%")

        # Explica√ß√£o autom√°tica do R¬≤
        st.subheader("üß† Interpreta√ß√£o do Modelo")
        if r2 >= 0.95:
            explicacao = "O modelo apresenta **excelente desempenho**: as previs√µes est√£o muito pr√≥ximas dos valores reais."
        elif r2 >= 0.85:
            explicacao = "O modelo possui **bom desempenho**, capturando bem a tend√™ncia dos dados com pequenas varia√ß√µes."
        elif r2 >= 0.7:
            explicacao = "O modelo tem **desempenho razo√°vel**, mas h√° margem para melhorias na precis√£o das previs√µes."
        else:
            explicacao = "O modelo apresenta **baixo desempenho**: as previs√µes divergem significativamente dos valores reais."

        st.write(explicacao)

        # Download do CSV
        csv = df.to_csv(index=False, sep=";").encode('utf-8-sig')
        st.download_button("Baixar resultados com erros calculados", csv, file_name="resultado_completo.csv", mime='text/csv')

    except Exception as e:
        st.error(f"Ocorreu um erro: {e}")
